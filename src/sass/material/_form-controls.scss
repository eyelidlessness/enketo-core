input[type='text'],
.print-input-text,
input[type='tel'],
input[type='password'],
input[type='url'],
input[type='email'],
input[type='file'],
input[type='date'],
input[type='month'],
input[type='time'],
input[type='datetime-local'],
input[type='number'],
input.number-input,
select,
textarea,
.base-form-control {
    display: block;

    height: var(--input-height);

    // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: var(--form-control-padding);
    margin: var(--form-control-margin);

    font-family: var(--font-family-base);
    font-weight: var(--font-weight-base);
    font-style: var(--font-style-base);
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    color: var(--input-color);
    background-color: var(--input-bg);
    background-image: none;

    // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid var(--theme-control-border-color);
    border-radius: var(--input-border-radius);

    transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;

    &:hover,
    &.active {
        border-color: var(--theme-control-hover-border-color);
    }

    &:focus,
    &:focus-visible {
        border-color: var(--theme-control-focus-border-color);
        outline: 1px solid var(--theme-control-focus-border-color);
    }

    // Placeholder
    &::-moz-placeholder {
        // Firefox
        color: var(--input-color-placeholder);
        opacity: 1;
    }

    // Safari and Chrome
    &::-webkit-input-placeholder {
        color: var(--input-color-placeholder);
    }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        cursor: not-allowed;
        color: var(--theme-control-disabled-color);
        border-color: var(--theme-control-disabled-border-color);
        opacity: 0.38;
    }
}

// fix readonly inputs inside widgets that are not actually 'readonly'
input:not([readonly]) + .widget {
    input[type='text'],
    input[type='tel'],
    input[type='password'],
    input[type='url'],
    input[type='email'],
    input[type='file'],
    input[type='date'],
    input[type='month'],
    input[type='time'],
    input[type='datetime-local'],
    input[type='number'],
    select,
    textarea {
        &[readonly] {
            background-color: var(--input-bg);
            cursor: auto;

            &:hover {
                background-color: var(--input-bg);
            }
        }
    }
}

//
// Forms
// --------------------------------------------------

// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
    padding: 0;
    margin: 0;
    border: 0;

    // Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    // See https://github.com/twbs/bootstrap/issues/12359.
    min-width: 0;
}

/*legend {
    display: block;
    width: 100%;
    padding: 0;
    margin-bottom: var(--line-height-computed);
    font-size: var(--font-size-base) * 1.5;
    line-height: inherit;
    color: var(--legend-color);
    border: 0;
    border-bottom: 1px solid var(--legend-border-color);
}*/

// Override content-box in Normalize (* isn't specific enough)
input[type='search'] {
    box-sizing: border-box;
}

// Set the height of file controls to match text inputs
input[type='file'] {
    display: block;
}

// Make range inputs behave like textual form controls
input[type='range'] {
    display: block;
    width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
    height: auto;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.
input[type='search'] {
    -webkit-appearance: none;
}

// Special styles for iOS date input
//
// In Mobile Safari, date inputs require a pixel line-height that matches the
// given height of the input.
input[type='date'] {
    line-height: var(--input-height);
}

// Apply same disabled cursor tweak as for inputs
//
// Note: Neither radios nor checkboxes can be readonly.
input[type='radio'],
input[type='checkbox'] {
    &[disabled],
    fieldset[disabled] & {
        cursor: not-allowed;
    }
}
